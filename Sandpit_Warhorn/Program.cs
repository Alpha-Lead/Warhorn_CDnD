
using GraphQL;
using GraphQL.Client.Http;
using GraphQL.Client.Serializer.Newtonsoft;
using Microsoft.Extensions.Configuration;
using Microsoft.Identity.Client;
using System.Runtime.CompilerServices;
using static System.Net.WebRequestMethods;

Console.WriteLine(
@" _    _            _                       ___  ___                                  " + "\r\n" +
@"| |  | |          | |                      |  \/  |                                  " + "\r\n" +
@"| |  | | __ _ _ __| |__   ___  _ __ _ __   | .  . | __ _ _ __   __ _  __ _  ___ _ __ " + "\r\n" +
@"| |/\| |/ _` | '__| '_ \ / _ \| '__| '_ \  | |\/| |/ _` | '_ \ / _` |/ _` |/ _ \ '__|" + "\r\n" +
@"\  /\  / (_| | |  | | | | (_) | |  | | | | | |  | | (_| | | | | (_| | (_| |  __/ |   " + "\r\n" +
@" \/  \/ \__,_|_|  |_| |_|\___/|_|  |_| |_| \_|  |_/\__,_|_| |_|\__,_|\__, |\___|_|   " + "\r\n" +
@"                                                                      __/ |          " + "\r\n" +
@"                                                                     |___/           "
);

//https://warhorn.net/developers/docs/guides/app-registration
//https://warhorn.net/developers/apps
//https://warhorn.net/developers/apps/w6buDsCRftLTm68u89xc8yLi
string ClientId = "";
//https://warhorn.net/developers/docs/guides/access-tokens
string AppToken = "";
string b64EncodedAuthStr = Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes($"{ClientId}:{AppToken}"));//Required for each request to identify application

string EventName = "";

HttpClient client = new HttpClient();

/*************************************
 * Secret Manager, to load variables *
 *************************************/
//https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets
var config = new Microsoft.Extensions.Configuration.ConfigurationBuilder()
    .AddUserSecrets<Program>()
    .Build();
ClientId = config["Warhorn:ClientId"];
AppToken = config["Warhorn:AppToken"];
EventName = config["Warhorn:EventName"];
b64EncodedAuthStr = Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes($"{ClientId}:{AppToken}"));

/*************************************
 * Try to get the initial connection *
 *************************************/
String requestUrl = "https://warhorn.net/graphql";
Dictionary<string, string> postValues = new Dictionary<string, string>();
postValues.Add("client_id", ClientId);
postValues.Add("client_secret", AppToken);
postValues.Add("grant_type", "client_credentials");
HttpContent httpContent = new FormUrlEncodedContent(postValues);
HttpResponseMessage response = await client.PostAsync(requestUrl, httpContent);
//HttpResponseMessage response = await Http.PostAsync(requestUrl, httpContent);

if (response.IsSuccessStatusCode)
{
    string message = response.StatusCode.ToString(); // response.Content.ToString() ?? "";
    Console.WriteLine("Auth POST response: {0}", message);
}
else
{
    Console.WriteLine("HTTP POST Auth request threw exception: {0}", response.Content.ToString());
}
//DevNote: Works, now need to get GraphQL queries working


/*************************
 * Authorization Request *
 *************************/
//https://warhorn.net/developers/docs/oauth/authorization
/*Request parameters:
 * Client Id
 * Client_Secret (app_token)
 * redirect_uri
 * response_type (must be "code")
 * [scope] {openid email profile} https://warhorn.net/developers/docs/guides/authorization-scope
 * state (generated by app, echoed)
 */


/*****************
 * Token Request *
 *****************/


/********************************************
 * Try and get a list of the upcoming games *
 ********************************************/
//DevNote: Added "GraphQL" package
//DevNote: There is documentation!!!, need to be logged in then: https://warhorn.net/developers/docs/products/graphql-api/overview
/*DevNote:
 * Such a useful tool!
 * https://warhorn.net/developers/tools/explorer
 * name:type
 * 
 * event = Venue/Event
 * "session" is what we are looking at, data wise
 * "email" will be NULL as I am not an admin
 */


GraphQLHttpClientOptions gqlClientOptions = new GraphQLHttpClientOptions
{
    EndPoint = new Uri("https://warhorn.net/graphql")
};
GraphQLHttpClient gqlHttpClient = new GraphQLHttpClient(gqlClientOptions, new NewtonsoftJsonSerializer(), client);
//gqlHttpClient.HttpClient.BaseAddress = new Uri(requestUrl);
gqlHttpClient.HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", b64EncodedAuthStr);
gqlHttpClient.HttpClient.DefaultRequestHeaders.Add("Accept", "application/json");
gqlHttpClient.HttpClient.DefaultRequestHeaders.ConnectionClose = false;
GraphQLRequest gqlRequest = new GraphQLRequest
{
    Query = @"
query {
  eventSessions (events: [""" + EventName+ @"] last: 10) {
    nodes {
      id
      name
      startsAt
      gmSignupsCount
      playerSignupsCount
      playerWaitlistEntriesCount
      gmSignups {
        user {
          id
        }
      }
      playerSignups {
        user {
          id
        }
      }
      playerWaitlistEntries {
        user {
          id
        }
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}
    ",
    Variables = new Dictionary<string, string>(){ { "slug", "TheLostDice" } }
};
//Didn't have permissions for "Me" query, so try and query 
//Until I can get the UserAuthentication working, I can't see the names of the people signed up to GM/Play/Waitlist
//But GraphQL Queries are working =D


GraphQLResponse<Newtonsoft.Json.Linq.JObject> gqlResponse = await gqlHttpClient.SendQueryAsync<Newtonsoft.Json.Linq.JObject>(gqlRequest);
if (gqlResponse.Data != null)
{
    Console.WriteLine("Response: {0}", gqlResponse.Data.ToString());
    //To get previous page, take the *startCursor*, and in the filter specify
    //before: "<startCursor>"

}
if (gqlResponse.Errors!= null)
{
    Console.WriteLine("ERROR: {0}", gqlResponse.Errors[0].Message.ToString());
}

//Console.WriteLine("{0}: {1}", gqlResponse.Data);


Console.WriteLine("==END==");
